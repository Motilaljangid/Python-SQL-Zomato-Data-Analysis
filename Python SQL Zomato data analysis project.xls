{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3a27d574",
   "metadata": {},
   "source": [
    "# zomato data analysis project\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "82a406ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c9e91e15",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe = pd.read_csv(\"Zomato data .csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "816acbea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      name online_order book_table   rate  votes  \\\n",
      "0                    Jalsa          Yes        Yes  4.1/5    775   \n",
      "1           Spice Elephant          Yes         No  4.1/5    787   \n",
      "2          San Churro Cafe          Yes         No  3.8/5    918   \n",
      "3    Addhuri Udupi Bhojana           No         No  3.7/5     88   \n",
      "4            Grand Village           No         No  3.8/5    166   \n",
      "..                     ...          ...        ...    ...    ...   \n",
      "143       Melting Melodies           No         No  3.3/5      0   \n",
      "144        New Indraprasta           No         No  3.3/5      0   \n",
      "145           Anna Kuteera          Yes         No  4.0/5    771   \n",
      "146                 Darbar           No         No  3.0/5     98   \n",
      "147          Vijayalakshmi          Yes         No  3.9/5     47   \n",
      "\n",
      "     approx_cost(for two people) listed_in(type)  \n",
      "0                            800          Buffet  \n",
      "1                            800          Buffet  \n",
      "2                            800          Buffet  \n",
      "3                            300          Buffet  \n",
      "4                            600          Buffet  \n",
      "..                           ...             ...  \n",
      "143                          100          Dining  \n",
      "144                          150          Dining  \n",
      "145                          450          Dining  \n",
      "146                          800          Dining  \n",
      "147                          200          Dining  \n",
      "\n",
      "[148 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print (dataframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "61c57233",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7/5</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>Melting Melodies</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.3/5</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>Dining</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>New Indraprasta</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.3/5</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>Dining</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>Anna Kuteera</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0/5</td>\n",
       "      <td>771</td>\n",
       "      <td>450</td>\n",
       "      <td>Dining</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>Darbar</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.0/5</td>\n",
       "      <td>98</td>\n",
       "      <td>800</td>\n",
       "      <td>Dining</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>Vijayalakshmi</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.9/5</td>\n",
       "      <td>47</td>\n",
       "      <td>200</td>\n",
       "      <td>Dining</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>148 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      name online_order book_table   rate  votes  \\\n",
       "0                    Jalsa          Yes        Yes  4.1/5    775   \n",
       "1           Spice Elephant          Yes         No  4.1/5    787   \n",
       "2          San Churro Cafe          Yes         No  3.8/5    918   \n",
       "3    Addhuri Udupi Bhojana           No         No  3.7/5     88   \n",
       "4            Grand Village           No         No  3.8/5    166   \n",
       "..                     ...          ...        ...    ...    ...   \n",
       "143       Melting Melodies           No         No  3.3/5      0   \n",
       "144        New Indraprasta           No         No  3.3/5      0   \n",
       "145           Anna Kuteera          Yes         No  4.0/5    771   \n",
       "146                 Darbar           No         No  3.0/5     98   \n",
       "147          Vijayalakshmi          Yes         No  3.9/5     47   \n",
       "\n",
       "     approx_cost(for two people) listed_in(type)  \n",
       "0                            800          Buffet  \n",
       "1                            800          Buffet  \n",
       "2                            800          Buffet  \n",
       "3                            300          Buffet  \n",
       "4                            600          Buffet  \n",
       "..                           ...             ...  \n",
       "143                          100          Dining  \n",
       "144                          150          Dining  \n",
       "145                          450          Dining  \n",
       "146                          800          Dining  \n",
       "147                          200          Dining  \n",
       "\n",
       "[148 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd678b48",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c440fd4c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35e023d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "31ae97af",
   "metadata": {},
   "source": [
    "# convert the data type of colomm - rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e322212b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beaaaa18",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b75c3de7",
   "metadata": {},
   "source": [
    "# Q1..What type of restaurant do the majority of customers order from? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1535cd68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    name online_order book_table  rate  votes  \\\n",
      "0                  Jalsa          Yes        Yes   4.1    775   \n",
      "1         Spice Elephant          Yes         No   4.1    787   \n",
      "2        San Churro Cafe          Yes         No   3.8    918   \n",
      "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
      "4          Grand Village           No         No   3.8    166   \n",
      "\n",
      "   approx_cost(for two people) listed_in(type)  \n",
      "0                          800          Buffet  \n",
      "1                          800          Buffet  \n",
      "2                          800          Buffet  \n",
      "3                          300          Buffet  \n",
      "4                          600          Buffet  \n"
     ]
    }
   ],
   "source": [
    "def handleRate(value):\n",
    "     value = str(value).split('/')\n",
    "     value=value[0];   \n",
    "     return float(value)\n",
    "    \n",
    "dataframe['rate']=dataframe['rate'].apply(handleRate)\n",
    "print (dataframe.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b86cc693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 148 entries, 0 to 147\n",
      "Data columns (total 7 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   name                         148 non-null    object \n",
      " 1   online_order                 148 non-null    object \n",
      " 2   book_table                   148 non-null    object \n",
      " 3   rate                         148 non-null    float64\n",
      " 4   votes                        148 non-null    int64  \n",
      " 5   approx_cost(for two people)  148 non-null    int64  \n",
      " 6   listed_in(type)              148 non-null    object \n",
      "dtypes: float64(1), int64(2), object(4)\n",
      "memory usage: 8.2+ KB\n"
     ]
    }
   ],
   "source": [
    "dataframe.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed80f942",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4b9c6c7e",
   "metadata": {},
   "source": [
    "# Type of resturant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6942274",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5136ca35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da8f1908",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'type of resturant')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=dataframe['listed_in(type)'])\n",
    "plt.xlabel(\"type of resturant\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a86c3e8",
   "metadata": {},
   "source": [
    "# conclusion - majority of the resturant falls in dinning catagory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcabc869",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1e1c6339",
   "metadata": {},
   "source": [
    "# Q.2...2 How many votes has each type of restaurant received from customers? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "72efea6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7228b560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Votes')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_data = dataframe.groupby('listed_in(type)')['votes'].sum()\n",
    "result=pd.DataFrame({'votes':grouped_data})\n",
    "plt.plot(result,c=\"green\",marker=\"o\")\n",
    "plt.xlabel(\"Type of resturant\",c=\"blue\",size=20)\n",
    "plt.ylabel(\"Votes\",c=\"red\",size=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72d2c823",
   "metadata": {},
   "source": [
    "# conclusion - dinning resturant has recieved maximum votes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f6ef66e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f1fb2a",
   "metadata": {},
   "source": [
    "# Q.3) What are the ratings that the majority of restaurants have received? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d76a2ff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "93ab10c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ea834e09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(dataframe['rate'],bins=5)\n",
    "plt.title(\"rating distribution\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16d2f03b",
   "metadata": {},
   "source": [
    "# conclusion - the majority resturant received rating from 3.4 to 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f622da86",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f8e8014",
   "metadata": {},
   "source": [
    "# Q.4)Zomato has observed that most couples order most of their food online. What is their average spending on each order?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ac91a26",
   "metadata": {},
   "source": [
    "# Avarage order spending by couple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7a3b634c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66172e59",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0077c0e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='approx_cost(for two people)', ylabel='count'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    " couple_data=dataframe['approx_cost(for two people)']\n",
    " sns.countplot(x=couple_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "506279e9",
   "metadata": {},
   "source": [
    "# conclusion - the majority of couple resturant with an approximate cost of 300 rupees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ed91372",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6671c7ad",
   "metadata": {},
   "source": [
    "# Q..4)Zomato has observed that most couples order most of their food online. What is their average spending on each order?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "13c074d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecad5cf4",
   "metadata": {},
   "source": [
    "# which mode receive maximum rating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44126888",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3e490808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='online_order', ylabel='rate'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,6))\n",
    "sns.boxplot(x='online_order',y='rate',data=dataframe)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27aa2a6f",
   "metadata": {},
   "source": [
    "# conclusion - the offline received lower rating in comoarsion to online order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff3bf05d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5ab64f95",
   "metadata": {},
   "source": [
    "# Q>>6) Which type of restaurant received more offline orders, so that Zomato can provide those customers with some good offers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f785922e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775   \n",
       "1         Spice Elephant          Yes         No   4.1    787   \n",
       "2        San Churro Cafe          Yes         No   3.8    918   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
       "4          Grand Village           No         No   3.8    166   \n",
       "\n",
       "   approx_cost(for two people) listed_in(type)  \n",
       "0                          800          Buffet  \n",
       "1                          800          Buffet  \n",
       "2                          800          Buffet  \n",
       "3                          300          Buffet  \n",
       "4                          600          Buffet  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0a4c993",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8a23dfed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pivot_table = dataframe.pivot_table(index='listed_in(type)',columns='online_order',aggfunc='size',fill_value=0)\n",
    "sns.heatmap(pivot_table, annot=True, cmap=\"YlOrBr\", fmt='d')\n",
    "plt.title(\"Heatmap\")\n",
    "plt.xlabel(\"Online Order\")\n",
    "plt.ylabel(\"Listed In (Type)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b115203",
   "metadata": {},
   "source": [
    "# conclusion- Dinning resturant primarily accept offline order,where as cafes primarily receive online orders.This suggest that client perfer to order in person at resturant ,but perfer online ordering af cafes..."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
